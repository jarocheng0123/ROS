amcl:
  ros__parameters:
    use_sim_time: False
    alpha1: 0.2 #描述从旋转角度考虑机器人里程计的旋转噪声
    alpha2: 0.2 #描述机器人平移分量中的里程计旋转噪音，噪声在机器人左右两边分布
    alpha3: 0.2 #描述机器人平移过程中的里程计平移噪音，沿着机器人前进方向分布
    alpha4: 0.2 #描述机器人旋转过程中的里程计平移噪音， 斜角方向上的运动噪声
    alpha5: 0.2 #描述仅适用于全向式（Omni）: 平移噪声。
    base_frame_id: "base_link"  #描述机器人基座frame名称。
    beam_skip_distance: 0.5 #描述设置忽略掉似然场模型中大多数粒子与地图不一致的光束，表示忽略的最大距离单位 (m) 。
    beam_skip_error_threshold: 0.9  #描述不匹配地图后的光束百分比，由于不一致而强制完全更新。
    beam_skip_threshold: 0.3  #描述需要跳过的光束（beams ）的百分比。
    do_beamskip: false  #描述是否在似然场模型（Likelihood field model）中进行波束（beam ）跳过。
    global_frame_id: "map"  #描述定位系统发布的坐标系名称。
    lambda_short: 0.1 #描述模型z_short部分的指数衰减参数。
    laser_likelihood_max_dist: 2.0  #描述在地图上进行障碍物充气的最大距离，用于likelihood_field模型。
    laser_max_range: 100.0  #描述要考虑的最大扫描范围，设为-1.0会直接使用激光报告的最大范围。
    laser_min_range: -1.0 #描述要考虑的最小扫描范围，-1.0将使用激光发出的的最小范围。
    laser_model_type: "likelihood_field"  #描述使用哪个模型，beam、likelihood_field 或 likelihood_field_prob。likelihood_field_prob 包含beamskip功能。
    max_beams: 60 #描述更新过滤器时，设置每次扫描要使用多少个均匀间隔的光束。
    max_particles: 2000 #描述所允许的最大粒子数。
    min_particles: 500  #描述所允许的最小粒子数。
    odom_frame_id: "odom" #描述里程计使用的frame名称。
    pf_err: 0.05  #描述粒子过滤器总体误差。
    pf_z: 0.99  #描述粒子过滤器总体密度。
    recovery_alpha_fast: 0.0  #描述快速平均重量过滤器的指数衰减率，用于决定何时通过添加随机姿势来恢复。一个好的值可能是0.001。
    recovery_alpha_slow: 0.0  #描述慢平均重量过滤器的指数衰减率，用于通过添加随机姿势来决定何时恢复。一个好的值可能是0.001。
    resample_interval: 1  #描述重新采样前所需的过滤器更新数量。
    robot_model_type: "nav2_amcl::DifferentialMotionModel"  #描述插件类的完全限定类型。可以值为nav2_amcl::DifferentialMotionModel和nav2_amcl::OmniMotionModel。
    save_pose_rate: 0.5 #描述将最后估计姿态和协方差存储到参数服务器的最大速率 (Hz)，在变量 ~initial_pose_* 和 ~initial_cov_* 中。此保存的姿势将在后续运行中用于初始化过滤器 (-1.0表示禁用)。
    sigma_hit: 0.2  #描述用于设置在模型z_hit部分中使用的高斯模型的标准差。
    tf_broadcast: true  #描述用于设置是否广播坐标变换。参数False可以以防止amcl发布全局坐标系和里程计坐标系之间的坐标变换。
    transform_tolerance: 1.0  #描述TF转换发布后的，该转换的所维持的有效时间。
    update_min_a: 0.2 #描述在执行过滤器更新之前需要的最小旋转角度。
    update_min_d: 0.25  #描述在执行过滤器更新之前需要的最小平移距离。
    z_hit: 0.5  #描述模型中z_hit部分的混合权重，所有使用的z权重之和必须为1。光束（Beam）模型使用所有共4个z_*权重，而似然模型（Likelihood）使用z_hit和z_rand权重。
    z_max: 0.05 #描述模型中z_max部分的混合权重，所有使用的z权重之和必须为1。光束（Beam）模型使用所有共4个z_*权重，而似然模型（Likelihood）使用z_hit和z_rand权重。
    z_rand: 0.5 #描述模型中z_rand部分的混合权重，所有使用的z权重之和必须为1。光束（Beam）模型使用所有共4个z_*权重，而似然模型（Likelihood）使用z_hit和z_rand权重。
    z_short: 0.05 #描述模型中z_short部分的混合权重，所有使用的z权重之和必须为1。光束（Beam）模型使用所有共4个z_*权重，而似然模型（Likelihood）使用z_hit和z_rand权重。
    scan_topic: scan  #描述要订阅的激光雷达话题名称。

amcl_map_client:
  ros__parameters:
    use_sim_time: False

amcl_rclcpp_node:
  ros__parameters:
    use_sim_time: False

bt_navigator:
  ros__parameters:
    use_sim_time: False
    global_frame: map #用于设置参考坐标系。
    robot_base_frame: base_link #用于设置机器人基座坐标系。
    odom_topic: /chassis/odom #用于设置发布里程计的话题。
    enable_groot_monitoring: True
    groot_zmq_publisher_port: 1666
    groot_zmq_server_port: 1667
    default_bt_xml_filename: "navigate_w_replanning_and_recovery.xml"
    plugin_lib_names:
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_truncate_path_action_bt_node
    - nav2_goal_updater_node_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_distance_traveled_condition_bt_node

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: False

controller_server:  #负责本地路径跟随，即根据路径规划器生成的全局路径，在局部范围内生成机器人的运动轨迹。 
  ros__parameters:
    use_sim_time: False #是否使用仿真时间，如果为true，则使用ROS的仿真时间，否则使用系统时间。默认值为true。
    controller_frequency: 20.0  #控制器的控制频率。默认值为20.0赫兹。
    min_x_velocity_threshold: 0.001 #机器人在x轴最小线速度。默认值为0.001
    min_y_velocity_threshold: 0.5 #机器人在y轴最小线速度。默认值为0.5
    min_theta_velocity_threshold: 0.001 #机器人的最小旋转角速度。默认值为0.001
    progress_checker_plugin: "progress_checker" #用于指定机器人在沿着全局路径移动时的路径跟踪插件。该参数的默认值为progress_checke。
    goal_checker_plugin: "goal_checker" # 用于指定机器人在执行导航任务时的目标检测插件。该参数的默认值为goal_checker
    controller_plugins: ["FollowPath"]  #用于指定机器人在执行导航任务时的运动控制插件。该参数的默认值为FollowPath

    # Progress checker parameters
    progress_checker: #progress_checker插件会根据机器人当前位置和全局路径信息，计算机器人需要沿着全局路径移动的下一个位置，并将该位置作为机器人的目标位置进行控制。 
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5 #用于控制机器人沿着全局路径移动时的偏差容忍度。该参数的默认值为0.5m。
      movement_time_allowance: 10.0 #用于控制机器人沿着全局路径移动时的时间容忍度。该参数的默认值为10s，即机器人在沿着全局路径移动时允许的时间为10s。如果机器人在沿着全局路径移动的时间超过了该时间，progress_checker插件会认为机器人超时了，需要及时调整机器人的运动控制，以确保机器人能够按照预定时间内完成导航任务。
    # Goal checker parameters
    goal_checker: #general_goal_checker插件会根据机器人当前位置和目标点信息，计算机器人需要到达的最终目标点，并将该点作为机器人的目标位置进行控制。 
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25 #参数用于控制机器人到达目标位置时的位置精度。该参数的默认值为0.25m，即机器人到达目标位置时允许的位置误差范围为0.25m。
      yaw_goal_tolerance: 0.25  #参数用于控制机器人到达目标位置时的方向精度。该参数的默认值为0.25rad，即机器人到达目标位置时允许的方向误差范围为0.25rad。
      stateful: True  #参数用于指定该插件是否需要维护状态信息。如果设置为 True，该插件会在机器人到达目标位置时将状态信息存储下来，以便后续的任务调度和统计分析。
    # DWB parameters
    FollowPath: #FollowPath插件会根据机器人当前位置和全局路径信息，计算机器人需要采取的线速度和角速度，运用了dwb算法，并将这些速度作为机器人的控制指令进行下发。 
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True
      min_vel_x: 0.0   #最小线速度
      min_vel_y: 0.0  #最小侧向速度
      max_vel_x: 0.26 #最大线速度
      max_vel_y: 0.0  #最大侧向速度
      max_vel_theta: 1.0  #最大角速度
      min_speed_xy: 0.0 #最小平面速度，通常为0
      max_speed_xy: 0.26  #最大平面速度，和max_vel_x相同
      min_speed_theta: 0.0   #最小角速度，通常为0
      # Add high threshold velocity for turtlebot 3 issue.
      # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
      acc_lim_x: 2.5  #x方向加速度限制
      acc_lim_y: 0.0  #y方向加速度限制
      acc_lim_theta: 3.2  #角加速度限制
      decel_lim_x: -2.5 #x方向减速度限制
      decel_lim_y: 0.0  #y方向减速度限制
      decel_lim_theta: -3.2   #角减速度限制
      vx_samples: 20  #线速度采样数，用于搜索最优解
      vy_samples: 5 #侧向速度采样数，用于搜索最优解
      vtheta_samples: 20  #角速度采样数
      sim_time: 1.7 #模拟时间，用于计算轨迹
      linear_granularity: 0.05   #线性路径的分辨率，即路径中相邻两个点之间的距离，单位为m。
      angular_granularity: 0.025  #旋转路径的分辨率，即路径中相邻两个点之间的角度，单位为rad。
      transform_tolerance: 0.2  #机器人状态变换的容忍度，即机器人位置和姿态在传递过程中的误差容忍度。
      xy_goal_tolerance: 0.25 #xy平面的目标容差
      trans_stopped_velocity: 0.25  #线速度小于该值，机器人被认为已停止
      short_circuit_trajectory_evaluation: True  #是否提前结束轨迹评估
      stateful: True
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]  #用于评估轨迹的批评家。这是一个评估器，它根据各种因素对轨迹进行评估，以确定其质量。它是自主导航系统中的一个重要组成部分，因为它可以帮助机器人决定最佳路径。
      BaseObstacle.scale: 0.02  #障碍物评估批评家的权重。这个参数用于调整障碍物评估批评家对轨迹的影响程度。如果这个值越高，那么机器人将更加关注避开障碍物，而不是其他因素。
      PathAlign.scale: 32.0 #路径对齐评估批评家的权重。这个参数用于调整路径对齐评估批评家对轨迹的影响程度。如果这个值越高，那么机器人将更加关注路径对齐，而不是其他因素。
      PathAlign.forward_point_distance: 0.1 #前向点的距离，用于计算路径对齐误差。这个参数用于计算机器人当前位置与路径的偏差，以便评估路径对齐性。
      GoalAlign.scale: 24.0 #目标对齐评估批评家的权重。这个参数用于调整目标对齐评估批评家对轨迹的影响程度。如果这个值越高，那么机器人将更加关注目标对齐，而不是其他因素。
      GoalAlign.forward_point_distance: 0.1 #前向点的距离，用于计算目标对齐误差。这个参数用于计算机器人当前位置与目标的偏差，以便评估目标对齐性。
      PathDist.scale: 32.0  #路径距离评估批评家的权重。这个参数用于调整路径距离评估批评家对轨迹的影响程度。如果这个值越高，那么机器人将更加关注路径的距离，而不是其他因素。
      GoalDist.scale: 24.0  #目标距离评估批评家的权重。这个参数用于调整目标距离评估批评家对轨迹的影响程度。如果这个值越高，那么机器人将更加关注目标的距离，而不是其他因素。
      RotateToGoal.scale: 32.0  #转向目标评估批评家的权重。这个参数用于调整转向目标评估批评家对轨迹的影响程度。如果这个值越高，那么机器人将更加关注转向目标，而不是其他因素。
      RotateToGoal.slowing_factor: 5.0  #减速因子，用于减速到目标。这个参数用于控制机器人接近目标时的速度。如果这个值越高，那么机器人将减速得更快。
      RotateToGoal.lookahead_time: -1.0 #前瞻时间，用于计算转向目标误差。这个参数用于计算机器人当前位置与目标的角度差，以便评估转向目标的精度。如果这个值越高，那么机器人将更加关注转向目标的精度

controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: False
      rolling_window: true
      width: 3
      height: 3
      resolution: 0.05
      robot_radius: 0.22
      plugins: ["voxel_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.55
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
      static_layer:
        map_subscribe_transient_local: True
      always_send_full_costmap: True
  local_costmap_client:
    ros__parameters:
      use_sim_time: False
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: False
      robot_radius: 0.22
      resolution: 0.05
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.55
      always_send_full_costmap: True
  global_costmap_client:
    ros__parameters:
      use_sim_time: False
  global_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False

map_server:
  ros__parameters:
    use_sim_time: False
    yaml_filename: "turtlebot3_world.yaml"

map_saver:
  ros__parameters:
    use_sim_time: False
    save_map_timeout: 5000
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: False

planner_server: #负责全局路径规划，即根据地图和目标点，生成一条从起始点到目标点的路径。
  ros__parameters:
    expected_planner_frequency: 20.0  #路径规划的频率，即规划器每秒钟生成的路径数。默认值为0.0，表示不限制频率。
    use_sim_time: False  #是否使用仿真时间，如果为true，则使用ROS的仿真时间，否则使用系统时间。默认值为true。
    planner_plugins: ["GridBased"]  #路径规划器的插件名称，即使用哪个路径规划器实现路径规划。默认值为grid_based，即使用基于栅格地图的路径规划器。也可以设置为其他插件名称，例如navfn、navfn_planner、teb_local_planner等。
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 0.5  #路径规划器的默认容忍误差，即机器人到达目标点的最大距离误差。默认值为0.5米。
      use_astar: false  #是否使用A*算法进行路径规划。默认值为false。
      allow_unknown: true #是否允许路径规划经过未知区域。默认值为false。

planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

recoveries_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    recovery_plugins: ["spin", "back_up", "wait"]
    spin:
      plugin: "nav2_recoveries/Spin"
    back_up:
      plugin: "nav2_recoveries/BackUp"
    wait:
      plugin: "nav2_recoveries/Wait"
    global_frame: odom
    robot_base_frame: base_link
    transform_timeout: 0.1
    use_sim_time: false
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

robot_state_publisher:
  ros__parameters:
    use_sim_time: False
